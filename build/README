# Build

## Usage

    build.py TEMPLATE_FILE [OUTPUT_FILE]

## Parameters

    TEMPLATE_FILE   -   the template from which to produce output file (see
                        syntax below).
    
    OUTPUT_FILE     -   the file to write output to.
    
## Template file syntax

Any plaintext file could be a valid template file however without the following
syntax, the output will generally be identity.

A template file should commence with the line exactly matching `::TEMPLATE;`
however some implementations may not require this or produce a warning if not
present. A comment following the semicolon should also be allowed (and ignored)
by model implementations. In order to comply with shebang, if the first line
commences with a `#`, it will be ignored and the second line shall be
`::TEMPLATE;`. This is a special case, all other `#` commencing lines will be
preserved in the output. This means that an executable (shebang) template to
produce an executable (shebang) script could commence as:

    `#! /path/to/build.py
     ::TEMPLATE; to build executable script
     #! /path/to/interpreter`

It is also recomended that template files use the file extension `.template`
however this is not mandated. A consitant style for file extensions should be
used within a project.

### General Syntax

The following syntax is available throughout the template file:

1. Any line commencing with the `\` character (preceeded only by whitespace)
   is treated as a literal line, the `\` is stripped however the whitespace
   (if any) is preserved.
   
        `    \:This is a line commencing with four spaces and a colon.`
        >
        `    :This is a line commencing with four spaces and a colon.`
        
        `\\This is a line commencing with a back slash.`
        >
        `\This is a line commencing with a backslash.`
        
        `\\:This is a line commencing with a back slash and a colon.`
        >
        `\:This is a line commencing with a back slash and a colon.`

   Note that the `\` character only has a special meaning at the beginning of
   a line. It is not a general escape character in the template syntax.
   
2. Any line commencing with the `:` character (preceeded only by whitespace)
   is treated as a command. If an output line needs to commence with a `:`, it
   should be escaped with a `\`. Commands must reside on a single line and
   consume the entire line. Commands must be closed with the `;` character.
   Command lines not containing a `;` will raise a warning or an error
   depending on implementation, context and other parameters. Anything
   following the first `;` on a command line is ignored and this space should
   be used for comments. An empty command `:;` can be used to insert a comment
   where no command is issued. The whitespace indent preceeding a command is
   ignored and context whitespace must be generated by the command.
   
        `:;This line is just a comment, nothing will be echoed to the output.`
    
        `    :command;This line will be replaced by the output of "command".`

   Note that commands which fail may do so silently or they may raise a
   warning or an error depending on implementation, context and other
   parameters.

3. Any line whose first (non-whitespace) character is neither the `:` nor the
   `\` character will be echoed to the output verbatim.

### Command Syntax

The following command types are available:

1. `::DECLARATION;`     -   As the first line of a file, declares the file
                            type. Recognized values are: `::TEMPLATE;`,
                            `::FRAGMENT;` and `::PARAMETRIC;`. Declaration
                            commands commence with two `:` characters (rather
                            than the usual one) and should be in allcaps style
                            (containing only capital letters, digits and `_`,
                            not commencing with a digit).

2. `:[path/to/]fragment;`
            -   This line shall be substituted by the verbatim contents
                (excluding the declaration line) of
                `[path/to/]fragment.fragment` or `[path/to/]fragment` if the
                former isn't found. This command will fail if neither file is
                found and may fail if the file is not declared as a
                `::FRAGMENT;`. Fragment files do not provide any recursive 
                command parsing. Fragment files should tend towards lower case
                styles but may contain any valid file path characters.

3. `:[path/to/]parametric();`
            -   This line shall be substituted by the parsed contents of
                `[path/to/]parametric.parametric` or `[path/to/]parametric` if
                the former isn't found. This command will fail if neither file
                is found and may fail if the file is not declared as a
                `::PARAMETRIC;`. Parametric files are like fragment files but
                may contain parameters which can be substituted via assignment
                between the parentheses where it is invoked in the template
                file. Parameters may be optional or required and default values
                may be specified by the parametric file. Where required
                parameters are not provided at invokation, this will raise a
                warning or an error depending on implementation, context and
                other parameters.
